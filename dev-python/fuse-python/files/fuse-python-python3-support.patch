diff -upr a/fuseparts/_fusemodule.c b/fuseparts/_fusemodule.c
--- a/fuseparts/_fusemodule.c
+++ b/fuseparts/_fusemodule.c
@@ -54,16 +54,14 @@ static PyInterpreterState *interp;
 #define PYLOCK()						\
 PyThreadState *_state = NULL;					\
 if (interp) {							\
-	PyEval_AcquireLock();					\
 	_state = PyThreadState_New(interp);			\
-	PyThreadState_Swap(_state);				\
+	PyEval_AcquireThread(_state);				\
 }
 
 #define PYUNLOCK() if (interp) {				\
 	PyThreadState_Clear(_state);				\
-	PyThreadState_Swap(NULL);				\
+	PyEval_ReleaseThread(_state);				\
 	PyThreadState_Delete(_state);				\
-	PyEval_ReleaseLock();					\
 }
  
 #else
@@ -87,8 +85,8 @@ if (v == Py_None) {		\
 	ret = 0;		\
 	goto OUT_DECREF;	\
 }				\
-if (PyInt_Check(v)) {		\
-	ret = PyInt_AsLong(v);	\
+if (PyLong_Check(v)) {		\
+	ret = PyLong_AsLong(v);	\
 	goto OUT_DECREF;	\
 }
 
@@ -119,18 +117,15 @@ fi_to_py(struct fuse_file_info *fi)
 /* transform a Python integer to an unsigned C numeric value */
 
 #define py2attr(st, attr) {						\
-	if (PyInt_Check(pytmp) && sizeof((st)->attr) <= sizeof(long)) {	\
+	if (PyLong_Check(pytmp) && sizeof((st)->attr) <= sizeof(long)) {\
 		/*							\
 		 * We'd rather use here PyInt_AsUnsignedLong() here	\
 		 * but there is no such thing. Closest match is		\
 		 * PyInt_AsUnsignedLongMask() but that doesn't check	\
 		 * for overflows. Duh.					\
 		 */							\
-		ctmp = PyInt_AsLong(pytmp);				\
-		if (ctmp >						\
-		    /* damn the funcall overhead...			\
-		           PyInt_GetMax() */				\
-		           LONG_MAX) {					\
+		ctmp = PyLong_AsLong(pytmp);				\
+		if (ctmp > LONG_MAX) {					\
 			/*						\
 			 * If the value, as unsigned, is bigger than	\
 			 * Python ints can be, then it was a negative	\
@@ -140,15 +135,13 @@ fi_to_py(struct fuse_file_info *fi)
 			goto OUT_DECREF;				\
 		}							\
 	} else {							\
-		if (PyInt_Check(pytmp))					\
+		if (PyLong_Check(pytmp))					\
 			/*						\
 			 * This fnc doesn't catch overflows but I guess	\
 			 * it shouldn't overflow after passing		\
-			 * PyInt_Check() ...				\
+			 * PyLong_Check() ...				\
 			 */						\
-			ctmp = PyInt_AsUnsignedLongLongMask(pytmp);	\
-		else if (PyLong_Check(pytmp))				\
-			ctmp = PyLong_AsUnsignedLongLong(pytmp);	\
+			ctmp = PyLong_AsUnsignedLongLongMask(pytmp);	\
 		else if (PyFloat_Check(pytmp))				\
 			ctmp =						\
 			  (unsigned long long)PyFloat_AsDouble(pytmp);	\
@@ -261,11 +254,11 @@ readlink_func(const char *path, char *li
 
 	PROLOGUE( PyObject_CallFunction(readlink_cb, "s", path) )
 
-	if(!PyString_Check(v)) {
+	if(!PyUnicode_Check(v)) {
 		ret = -EINVAL;
 		goto OUT_DECREF;
 	}
-	s = PyString_AsString(v);
+	s = PyUnicode_AsUTF8(v);
 	strncpy(link, s, size);
 	link[size-1] = '\0';
 	ret = 0;
@@ -326,18 +319,18 @@ dir_add_entry(PyObject *v, fuse_dirh_t b
 
 	if (!(pytmp = PyObject_GetAttrString(v, "name"))) 
 		goto OUT_DECREF;		       
-	if (!PyString_Check(pytmp)) {
+	if (!PyUnicode_Check(pytmp)) {
 		Py_DECREF(pytmp);
 		goto OUT_DECREF;		       
 	}					       
 
 #if FUSE_VERSION >= 23
-	ret = df(buf, PyString_AsString(pytmp), &st, offs.offset);
+	ret = df(buf, PyUnicode_AsUTF8(pytmp), &st, offs.offset);
 #elif FUSE_VERSION >= 21
-	ret = df(buf, PyString_AsString(pytmp), (st.st_mode & 0170000) >> 12,
+	ret = df(buf, PyUnicode_AsUTF8(pytmp), (st.st_mode & 0170000) >> 12,
                  st.st_ino);
 #else
-	ret = df(buf, PyString_AsString(pytmp), (st.st_mode & 0170000) >> 12);
+	ret = df(buf, PyUnicode_AsUTF8(pytmp), (st.st_mode & 0170000) >> 12);
 #endif
 	Py_DECREF(pytmp);
 
@@ -490,11 +483,11 @@ read_func(const char *path, char *buf, s
 	PROLOGUE( PYO_CALLWITHFI(fi, read_cb, snK, path, s, off) )
 #endif
 
-	if(PyString_Check(v)) {
-		if(PyString_Size(v) > s)
+	if(PyBytes_Check(v)) {
+		if(PyBytes_Size(v) > s)
 			goto OUT_DECREF;
-		memcpy(buf, PyString_AsString(v), PyString_Size(v));
-		ret = PyString_Size(v);
+		memcpy(buf, PyBytes_AsString(v), PyBytes_Size(v));
+		ret = PyBytes_Size(v);
 	}
 
 	EPILOGUE
@@ -677,25 +670,25 @@ getxattr_func(const char *path, const ch
 	PROLOGUE( PyObject_CallFunction(getxattr_cb, "ssn", path, name, size) )
 #endif
 
-	if(PyString_Check(v)) {
+	if(PyBytes_Check(v)) {
         /* size zero can be passed into these calls  to return the current size of
          * the named extended attribute
          */
         if (size == 0) {
-		    ret = PyString_Size(v);
+		    ret = PyBytes_Size(v);
 			goto OUT_DECREF;
         } 
 
         /* If the size of the value buffer is too small to hold the result,  errno
          * is set to ERANGE.
          */
-		if (PyString_Size(v) > size) {
+		if (PyBytes_Size(v) > size) {
             ret = -ERANGE;
 			goto OUT_DECREF;
         }
 
-		memcpy(value, PyString_AsString(v), PyString_Size(v));
-		ret = PyString_Size(v);
+		memcpy(value, PyBytes_AsString(v), PyBytes_Size(v));
+		ret = PyBytes_Size(v);
 	}
 
 	EPILOGUE
@@ -726,18 +719,18 @@ listxattr_func(const char *path, char *l
 			break;
 		}
 
-		if (!PyString_Check(w)) {
+		if (!PyBytes_Check(w)) {
 			Py_DECREF(w);
 			break;
 		}
 
-		ilen = PyString_Size(w);
+		ilen = PyBytes_Size(w);
 		if (lx - list + ilen >= size) {
 			Py_DECREF(w);
 			break;
 		}
 
-		strncpy(lx, PyString_AsString(w), ilen + 1);
+		strncpy(lx, PyBytes_AsString(w), ilen + 1);
 		lx += ilen + 1;
 
 		Py_DECREF(w);
@@ -1045,14 +1038,14 @@ Fuse_main(PyObject *self, PyObject *args
 			PyObject *pa;
 	
 			pa = PySequence_GetItem(fargseq, i);
-			if (!PyString_Check(pa)) {
+			if (!PyUnicode_Check(pa)) {
 				Py_DECREF(pa);
 
 				PyErr_SetString(PyExc_TypeError,
 			                        "fuse argument is not a string");
 		                return(NULL);
 			}
-			fargv[i] =  PyString_AsString(pa);
+			fargv[i] =  PyUnicode_AsUTF8(pa);
 
 			Py_DECREF(pa);
 		}
@@ -1129,17 +1122,17 @@ FuseInvalidate(PyObject *self, PyObject
 	if (!(arg1 = PyTuple_GetItem(args, 1)))
 		return(NULL);
 
-	if(!PyString_Check(arg1)) {
+	if(!PyUnicode_Check(arg1)) {
 		PyErr_SetString(PyExc_TypeError, "argument must be a string");
 
 		return(NULL);
 	}
 
-	path = PyString_AsString(arg1);
+	path = PyUnicode_AsUTF8(arg1);
 
 	err = fuse_invalidate(fuse, path);
 
-	ret = PyInt_FromLong(err);
+	ret = PyLong_FromLong(err);
 
 	return(ret);
 }
@@ -1160,15 +1153,15 @@ FuseGetContext(PyObject *self, PyObject
 	if(!ret)
 		return(NULL);
 
-	num = PyInt_FromLong(fc->uid);
+	num = PyLong_FromLong(fc->uid);
 	PyDict_SetItemString(ret, "uid", num);	
 	Py_XDECREF( num );
 
-	num = PyInt_FromLong(fc->gid);
+	num = PyLong_FromLong(fc->gid);
 	PyDict_SetItemString(ret, "gid", num);	
 	Py_XDECREF( num );
 
-	num = PyInt_FromLong(fc->pid);
+	num = PyLong_FromLong(fc->pid);
 	PyDict_SetItemString(ret, "pid", num);	
 	Py_XDECREF( num );
 
@@ -1181,7 +1174,7 @@ static char FuseAPIVersion__doc__[] =
 static PyObject *
 FuseAPIVersion(PyObject *self, PyObject *args)
 {
-	PyObject *favers = PyInt_FromLong(FUSE_VERSION);
+	PyObject *favers = PyLong_FromLong(FUSE_VERSION);
 
 	return favers;
 }
@@ -1197,13 +1190,25 @@ static PyMethodDef Fuse_methods[] = {
 
 /* Initialization function for the module (*must* be called init_fuse) */
 
-DL_EXPORT(void)
-init_fuse(void)
+static struct PyModuleDef moduledef = {
+	PyModuleDef_HEAD_INIT,
+	"_fuse",
+	NULL,
+	-1,
+	Fuse_methods,
+	NULL,
+	NULL,
+	NULL,
+	NULL
+};
+
+PyObject *
+PyInit__fusemodule(void)
 {
 	PyObject *m, *d;
  
 	/* Create the module and add the functions */
-	m = Py_InitModule("_fuse", Fuse_methods);
+	m = PyModule_Create(&moduledef);
 
 	/* Add some symbolic constants to the module */
 	d = PyModule_GetDict(m);
@@ -1211,4 +1216,6 @@ init_fuse(void)
 	PyDict_SetItemString(d, "FuseError", Py_FuseError);
 	/* compat */
 	PyDict_SetItemString(d, "error", Py_FuseError);
+
+	return m;
 }
diff -upr a/fuse.py b/fuse.py
--- a/fuse.py
+++ b/fuse.py
@@ -17,15 +17,14 @@ try:
 except:
     pass
 
-from string import join
 import sys
 import os
 from errno import *
 from os import environ
 import re
 from fuseparts import __version__
-from fuseparts._fuse import main, FuseGetContext, FuseInvalidate
-from fuseparts._fuse import FuseError, FuseAPIVersion
+from fuseparts._fusemodule import main, FuseGetContext, FuseInvalidate
+from fuseparts._fusemodule import FuseError, FuseAPIVersion
 from fuseparts.subbedopts import SubOptsHive, SubbedOptFormatter
 from fuseparts.subbedopts import SubbedOptIndentedFormatter, SubbedOptParse
 from fuseparts.subbedopts import SUPPRESS_HELP, OptParseError
